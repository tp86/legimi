local lu = require "luaunit"

local requests = require "data.request"

local AuthReq = requests.Auth
local Packet = require "packet".Packet

Test_auth_request = {

  test_can_be_serialized = function()
    local login, password, deviceid = "login", "password", 0x12345678
    local expected = {
      header = "\x11\x00\x00\x00\x50\x00\x3c\x00\x00\x00",
      content = {
        count = "\x04\x00",
        parts = {
          "\x00\x00\x05\x00\x00\x00login",
          "\x01\x00\x08\x00\x00\x00password",
          "\x02\x00\x08\x00\x00\x00\x78\x56\x34\x12",
          "\x03\x00\x0d\x00\x00\x001.5.0 Windows",
        }
      }
    }
    local actual = AuthReq:pack(login, password, deviceid)
    local from, to = 1, #expected.header
    lu.assert_equals(actual:sub(from, to), expected.header)
    from = to + 1
    to = from + #expected.content.count - 1
    lu.assert_equals(actual:sub(from, to), expected.content.count)
    from = to + 1
    for _, part in ipairs(expected.content.parts) do
      lu.assert_str_contains(actual:sub(from), part)
    end
  end,
}

Test_auth_response = {

  test_can_extract_sessionid = function()
    local value = "\z
      \x11\x00\x00\x00\x02\x40\x47\x01\x00\x00\x1c\x00\x00\x00\x02\x00\z
      \x00\x00\x03\x00\x01\x00\x08\x00\x00\x00\x00\xa1\xdc\x51\x14\x15\z
      \xdb\x08\x02\x00\x08\x00\x00\x00\x65\xb2\x1a\x00\x00\x00\x00\x00\z
      \x08\x00\x11\x00\x00\x00\x65\x62\x6f\x6f\x6b\x69\x20\x62\x65\x7a\z
      \x20\x6c\x69\x6d\x69\x74\x75\x0c\x00\x0a\x00\x00\x00\x61\x64\x79\z
      \x65\x6e\x2d\x63\x61\x72\x64\x0d\x00\x04\x00\x00\x00\x14\x00\x00\z
      \x00\x0f\x00\x04\x00\x00\x00\x01\x00\x00\x00\x10\x00\x04\x00\x00\z
      \x00\x01\x00\x00\x00\x0e\x00\x04\x00\x00\x00\x01\x00\x00\x00\x11\z
      \x00\x04\x00\x00\x00\x01\x00\x00\x00\x20\x00\x04\x00\x00\x00\x01\z
      \x00\x00\x00\x1b\x00\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x08\z
      \x00\x00\x00\x30\x6f\xee\xb3\x2a\x05\xdb\x08\x15\x00\x01\x00\x00\z
      \x00\x00\x12\x00\x01\x00\x00\x00\x00\x17\x00\x04\x00\x00\x00\xff\z
      \xff\xff\xff\x18\x00\x04\x00\x00\x00\xff\xff\xff\xff\x19\x00\x04\z
      \x00\x00\x00\x00\x00\x00\x00\x1a\x00\x09\x00\x00\x00\x33\x39\x2c\z
      \x39\x39\x20\x7a\xc5\x82\x1c\x00\x01\x00\x00\x00\xff\x1d\x00\x01\z
      \x00\x00\x00\x00\x1f\x00\x01\x00\x00\x00\x00\x21\x00\x04\x00\x00\z
      \x00\x07\x00\x00\x00\x22\x00\x04\x00\x00\x00\x07\x00\x00\x00\x23\z
      \x00\x01\x00\x00\x00\x00\x25\x00\x01\x00\x00\x00\x00\x16\x00\x08\z
      \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x20\x00\x00\z
      \x00\x63\x38\x61\x30\x37\x34\x65\x63\x39\x61\x36\x39\x34\x32\x62\z
      \x36\x39\x36\x31\x38\x32\x62\x62\x38\x62\x63\x34\x65\x38\x34\x34\z
      \x39"
    local expected = {
      sessionid = "\z
        \x63\x38\x61\x30\x37\x34\x65\x63\x39\x61\x36\x39\x34\x32\x62\x36\z
        \x39\x36\x31\x38\x32\x62\x62\x38\x62\x63\x34\x65\x38\x34\x34\x39"
    }
    local actual = Packet.unpack(value)
    lu.assert_equals(actual.sessionid, expected.sessionid)
  end,
}

local runner = not ... or #arg > 0
if runner then
  os.exit(lu.LuaUnit.run())
end
